# PostgreSQL init script
apiVersion: v1
kind: ConfigMap
metadata:
    name: n8n-postgres-script
    namespace: automation
data:
    init-data.sh: |
        #!/bin/bash
        set -e;
        if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        CREATE USER ${POSTGRES_NON_ROOT_USER} WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';
        GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_NON_ROOT_USER};
        EOSQL
        else
        echo "SETUP INFO: No Environment variables given!"
        fi
--- # Secrets
apiVersion: v1
kind: Secret
metadata: 
    name: n8n-secret
    namespace: automation
type: Opaque
stringData: 
    N8N_ENCRYPTION_KEY: xxxxxx
    DB_POSTGRESDB_DATABASE: n8n
    DB_POSTGRESDB_USER: n8n
    DB_POSTGRESDB_PASSWORD: xxxxxx
    DB_ROOT_PASSWORD: xxxxxx
--- # Volume Claim
kind: PersistentVolumeClaim
apiVersion: v1
metadata: 
    name: nfs-pvc-n8n
    namespace: automation
    annotations: 
        nfs.io/storage-path: "n8n"
spec: 
    storageClassName: nfs-client
    accessModes: 
        - ReadWriteMany
    resources: 
        requests: 
            storage: 50Gi
--- # PostgreSQL Stateful Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata: 
    name: n8n-postgres-deployment
    namespace: automation
spec: 
    replicas: 1
    selector: 
        matchLabels: 
            app: n8n-postgres
    template: 
        metadata: 
            labels: 
                app: n8n-postgres
        spec: 
            volumes: 
                - name: n8n-postgres-storage
                  persistentVolumeClaim: 
                      claimName: nfs-pvc-n8n
                - name: n8n-postgres-script
                  configMap: 
                      name: n8n-postgres-script
            containers: 
                - name: postgres
                  image: postgres:11
                  ports: 
                      - containerPort: 5432
                  volumeMounts: 
                      - mountPath: /var/lib/postgresql/data
                        name: n8n-postgres-storage
                        subPath: database
                      - mountPath: /docker-entrypoint-initdb.d
                        name: n8n-postgres-script
                        readOnly: true
                  env: 
                      - name: POSTGRES_USER
                        value: root
                      - name: POSTGRES_PASSWORD
                        valueFrom: 
                            secretKeyRef: 
                                name: n8n-secret
                                key: DB_ROOT_PASSWORD
                      - name: POSTGRES_NON_ROOT_USER
                        valueFrom: 
                            secretKeyRef: 
                                name: n8n-secret
                                key: DB_POSTGRESDB_USER
                      - name: POSTGRES_NON_ROOT_PASSWORD
                        valueFrom: 
                            secretKeyRef: 
                                name: n8n-secret
                                key: DB_POSTGRESDB_PASSWORD
                      - name: POSTGRES_DB
                        valueFrom: 
                            secretKeyRef: 
                                name: n8n-secret
                                key: DB_POSTGRESDB_DATABASE
                      - name: POSTGRES_HOST
                        value: n8n-postgres-service.automation.svc.cluster.local
                      - name: PGDATA
                        value: /var/lib/postgresql/data/pgdata
--- # PostgreSQL Service
apiVersion: v1
kind: Service
metadata: 
    name: n8n-postgres-service
    namespace: automation
spec: 
    selector: 
        app: n8n-postgres
    ports: 
        - port: 5432
          targetPort: 5432
--- # Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
    name: n8n-redis-deployment
    namespace: automation
spec: 
    replicas: 1
    selector: 
        matchLabels: 
            app: n8n-redis
    template: 
        metadata: 
            labels: 
                app: n8n-redis
        spec: 
            containers: 
                - name: redis
                  image: redis:7
                  ports: 
                      - containerPort: 6379
--- # Redis Service
apiVersion: v1
kind: Service
metadata: 
    name: n8n-redis-service
    namespace: automation
spec: 
    selector: 
        app: n8n-redis
    ports: 
        - port: 6379
          targetPort: 6379
--- # n8n Deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
    name: n8n-deployment
    namespace: automation
spec: 
    replicas: 1
    strategy: 
        type: Recreate
    selector: 
        matchLabels: 
            app: n8n
    template: 
        metadata: 
            labels: 
                app: n8n
        spec: 
            containers: 
                - name: n8n
                  image: docker.n8n.io/n8nio/n8n
                  imagePullPolicy: IfNotPresent
                  envFrom: 
                      - secretRef:
                            name: n8n-secret
                  env: 
                      - name: GENERIC_TIMEZONE
                        value: Europe/Berlin
                      - name: TZ
                        value: Europe/Berlin
                      - name: DB_TYPE
                        value: postgresdb
                      - name: DB_POSTGRESDB_HOST
                        value: n8n-postgres-service.automation.svc.cluster.local
                      - name: QUEUE_BULL_REDIS_HOST
                        value: n8n-redis-service.automation.svc.cluster.local
                      - name: EXECUTIONS_MODE
                        value: queue
                  ports: 
                      - name: http
                        containerPort: 5678
                        protocol: TCP
                  volumeMounts: 
                      - mountPath: /home/node/.n8n
                        name: n8n-storage
                        subPath: n8n
            volumes: 
                - name: n8n-storage
                  persistentVolumeClaim: 
                      claimName: nfs-pvc-n8n
--- # n8n Service
apiVersion: v1
kind: Service
metadata: 
    name: n8n-service
    namespace: automation
spec: 
    selector: 
        app: n8n
    ports: 
        - port: 80
          targetPort: 5678
--- # n8n Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
    name: n8n-worker-deployment
    namespace: automation
spec: 
    replicas: 2
    strategy: 
        type: Recreate
    selector: 
        matchLabels: 
            app: n8n-worker
    template: 
        metadata: 
            labels: 
                app: n8n-worker
        spec: 
            containers: 
                - name: n8n-worker
                  image: docker.n8n.io/n8nio/n8n
                  imagePullPolicy: IfNotPresent
                  args: ["worker"]
                  envFrom: 
                      - secretRef:
                            name: n8n-secret
                  env: 
                      - name: GENERIC_TIMEZONE
                        value: Europe/Berlin
                      - name: TZ
                        value: Europe/Berlin
                      - name: DB_TYPE
                        value: postgresdb
                      - name: DB_POSTGRESDB_HOST
                        value: n8n-postgres-service.automation.svc.cluster.local
                      - name: QUEUE_BULL_REDIS_HOST
                        value: n8n-redis-service.automation.svc.cluster.local
                      - name: EXECUTIONS_MODE
                        value: queue
                  volumeMounts: 
                      - mountPath: /home/node/.n8n
                        name: n8n-storage
                        subPath: n8n
            volumes: 
                - name: n8n-storage
                  persistentVolumeClaim: 
                      claimName: nfs-pvc-n8n
--- # n8n Webhook Deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
    name: n8n-webhook-deployment
    namespace: automation
spec: 
    replicas: 2
    strategy: 
        type: Recreate
    selector: 
        matchLabels: 
            app: n8n-webhook
    template: 
        metadata: 
            labels: 
                app: n8n-webhook
        spec: 
            containers: 
                - name: n8n-webhook
                  image: docker.n8n.io/n8nio/n8n
                  imagePullPolicy: IfNotPresent
                  args: ["webhook"]
                  envFrom:
                      - secretRef:
                            name: n8n-secret
                  env: 
                      - name: GENERIC_TIMEZONE
                        value: Europe/Berlin
                      - name: TZ
                        value: Europe/Berlin
                      - name: DB_TYPE
                        value: postgresdb
                      - name: DB_POSTGRESDB_HOST
                        value: n8n-postgres-service.automation.svc.cluster.local
                      - name: QUEUE_BULL_REDIS_HOST
                        value: n8n-redis-service.automation.svc.cluster.local
                      - name: EXECUTIONS_MODE
                        value: queue
                  ports: 
                      - name: http
                        containerPort: 5678
                        protocol: TCP
                  volumeMounts: 
                      - mountPath: /home/node/.n8n
                        name: n8n-storage
                        subPath: n8n
            volumes: 
                - name: n8n-storage
                  persistentVolumeClaim: 
                      claimName: nfs-pvc-n8n
--- # n8n Webhook Service
apiVersion: v1
kind: Service
metadata: 
    name: n8n-webhook-service
    namespace: automation
spec: 
    selector: 
        app: n8n-webhook
    ports: 
        - port: 80
          targetPort: 5678
--- # n8n ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: n8n-ingress
  namespace: automation
spec:
  rules:
    - host: flow.example.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: n8n-service
                port:
                  number: 80
          - path: /webhook
            pathType: Prefix
            backend:
              service:
                name: n8n-webhook-service
                port:
                  number: 80
